{"ast":null,"code":"var _jsxFileName = \"/Users/robz/development/profilemanager/react_mongo_accounts/src/components/LoginForm.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux'; // semantic-ui\n\nimport { Container, Form, Input, Button, Grid } from 'semantic-ui-react'; // alert\n\nimport Alert from 'react-s-alert'; // API\n\nimport * as MyAPI from '../utils/MyAPI';\nimport { LOCAL_STRAGE_KEY } from '../utils/Settings';\nimport { loginWithEmailRedux } from '../actions/UserActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoginForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: '',\n      password: ''\n    };\n\n    this.onSubmit = () => {\n      const {\n        email,\n        password\n      } = this.state;\n      const params = {\n        email: email,\n        password: password\n      }; // create account\n\n      MyAPI.signinWithPassword(params).then(data => {\n        return new Promise((resolve, reject) => {\n          if (data.status !== 'success') {\n            let error_text = 'Error';\n\n            if (data.detail) {\n              error_text = data.detail;\n            }\n\n            reject(error_text);\n          } else {\n            // success\n            const params = {\n              user: data.user,\n              login_token: data.login_token\n            };\n            localStorage.setItem(LOCAL_STRAGE_KEY, JSON.stringify(params));\n            this.props.mapDispatchToLoginWithPassword(params);\n            resolve();\n          }\n        });\n      }).then(() => {\n        // redirect\n        this.props.history.push(\"/dashboard\");\n      }).catch(err => {\n        console.log(\"err:\", err);\n        Alert.error(err, {\n          position: 'top-right',\n          effect: 'slide',\n          timeout: 5000\n        });\n      });\n    };\n\n    this.handleChange = (e, {\n      name,\n      value\n    }) => {\n      this.setState({\n        [name]: value\n      });\n    };\n  }\n\n  render() {\n    const {\n      email,\n      password\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      text: true,\n      className: \"create_acount_form\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        style: {\n          marginTop: 60\n        },\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"left\",\n            width: 16,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              style: {\n                width: '100%'\n              },\n              icon: \"mail outline\",\n              iconPosition: \"left\",\n              name: \"email\",\n              onChange: this.handleChange,\n              value: email,\n              placeholder: \"yourname@example.com\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"left\",\n            width: 16,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              style: {\n                width: '100%'\n              },\n              icon: \"key\",\n              iconPosition: \"left\",\n              name: \"password\",\n              onChange: this.handleChange,\n              value: password,\n              placeholder: \"********\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            width: 16,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                width: '100%'\n              },\n              loading: this.state.loading,\n              disabled: this.state.loading,\n              type: \"submit\",\n              children: \"Sign in\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n} // react-redux\n\n\nfunction mapStateToProps({\n  user\n}) {\n  return {\n    user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    mapDispatchToLoginWithPassword: data => dispatch(loginWithEmailRedux({\n      params: data\n    }))\n  };\n} // export default withRouter(MainPage);\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(LoginForm));","map":{"version":3,"sources":["/Users/robz/development/profilemanager/react_mongo_accounts/src/components/LoginForm.js"],"names":["React","Component","withRouter","connect","Container","Form","Input","Button","Grid","Alert","MyAPI","LOCAL_STRAGE_KEY","loginWithEmailRedux","LoginForm","state","email","password","onSubmit","params","signinWithPassword","then","data","Promise","resolve","reject","status","error_text","detail","user","login_token","localStorage","setItem","JSON","stringify","props","mapDispatchToLoginWithPassword","history","push","catch","err","console","log","error","position","effect","timeout","handleChange","e","name","value","setState","render","marginTop","width","loading","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { withRouter } from 'react-router'\nimport { connect } from 'react-redux'\n\n// semantic-ui\nimport { Container, Form, Input, Button, Grid } from 'semantic-ui-react'\n\n// alert\nimport Alert from 'react-s-alert';\n\n// API\nimport * as MyAPI from '../utils/MyAPI'\nimport { LOCAL_STRAGE_KEY } from '../utils/Settings'\n\nimport { loginWithEmailRedux } from '../actions/UserActions'\n\nclass LoginForm extends Component {\n\n  state = {\n    email: '',\n    password: '',\n  }\n\n  onSubmit = () => {\n\n    const { email, password } = this.state\n    const params = {\n      email: email,\n      password: password,\n    }\n\n    // create account\n    MyAPI.signinWithPassword(params)\n    .then((data) => {\n\n      return new Promise((resolve, reject) => {\n\n        if (data.status !== 'success'){\n          let error_text = 'Error';\n          if (data.detail){\n            error_text = data.detail\n          }\n          reject(error_text)\n\n        } else {\n          // success\n          const params = {\n            user: data.user,\n            login_token: data.login_token,\n          }\n\n          localStorage.setItem(LOCAL_STRAGE_KEY, JSON.stringify(params))\n          this.props.mapDispatchToLoginWithPassword(params)\n          resolve()\n        }\n      })\n    })\n    .then(() => {\n      // redirect\n      this.props.history.push(\"/dashboard\")\n    })\n    .catch((err) => {\n      console.log(\"err:\", err)\n\n      Alert.error(err, {\n        position: 'top-right',\n        effect: 'slide',\n        timeout: 5000\n      });\n    })\n  }\n\n  handleChange = (e, { name, value }) => {\n    this.setState({ [name]: value })\n  }\n\n  render() {\n\n    const { email, password } = this.state\n\n    return(\n      <Container text className='create_acount_form'>\n\n        <Form onSubmit={this.onSubmit} style={{marginTop:60}}>\n          <Grid>\n\n            <Grid.Column textAlign='left' width={16}>\n              <label>Email</label>\n              <Input\n                style={{width: '100%'}}\n                icon='mail outline'\n                iconPosition='left'\n                name='email'\n                onChange={this.handleChange}\n                value={email}\n                placeholder='yourname@example.com' />\n            </Grid.Column>\n\n            <Grid.Column textAlign='left' width={16}>\n              <label>Password</label>\n              <Input\n                style={{width: '100%'}}\n                icon='key'\n                iconPosition='left'\n                name='password'\n                onChange={this.handleChange}\n                value={password}\n                placeholder='********' />\n            </Grid.Column>\n\n            <Grid.Column  width={16}>\n              <Button\n                style={{width: '100%'}}\n                loading={this.state.loading}\n                disabled={this.state.loading}\n                type='submit'>Sign in</Button>\n            </Grid.Column>\n\n          </Grid>\n\n        </Form>\n\n      </Container>\n    )\n  }\n}\n\n// react-redux\nfunction mapStateToProps ( {user} ) {\n  return {\n    user\n  }\n}\n\nfunction mapDispatchToProps (dispatch) {\n  return {\n    mapDispatchToLoginWithPassword: (data) => dispatch(loginWithEmailRedux({ params: data})),\n  }\n}\n\n\n// export default withRouter(MainPage);\nexport default withRouter( connect( mapStateToProps, mapDispatchToProps )(LoginForm) )\n"]},"metadata":{},"sourceType":"module"}